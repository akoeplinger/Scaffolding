<#=  template hostSpecific="true" linePragmas="false" #>
<#=  parameter type="Microsoft.VisualStudio.Web.CodeGenerators.Mvc.MinimalApi.MinimalApiModel" name="Model" #>
<#=  import namespace="System.Collections.Generic" #>
<#=  import namespace="System.Text" #>
namespace <#= Model.EndpointsNamespace #>;

public static class <#= Model.EndpointsName #>
{
    public static void <#= Model.MethodName #>(this IEndpointRouteBuilder routes)
    {
<# 
    if(Model.OpenAPI)
    {
#>
        var group = routes.MapGroup("<#= routePrefix #>").WithTags(nameof(<#= modelName #>));
<#  }
    else
    {
#>
        var group = routes.MapGroup("<#= routePrefix #>");
<#   }  
#>
        group.MapGet("/", () =>
        {
            return new [] { new <#= modelConstructor #>};
        })
<#= {
    string builderExtensions = $".WithName(\"{<#= getAllModels}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if(!Model.UseTypedResults)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.Produces<{<#= modelArray}>(StatusCodes.Status200OK)";
    }
        <#= :<#= builderExtensions;
}
        
        group.MapGet("/{id}", (int id) =>
        {
            //return new <#= modelName { ID = id };
        })
<#= {
    builderExtensions = $".WithName(\"{<#= getModelById}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if(!Model.UseTypedResults)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.Produces<{<#= modelName}>(StatusCodes.Status200OK)";
    }
        <#= :<#= builderExtensions;
}

        group.MapPut("/{id}", (int id, <#= modelName input) =>
        {
            return <#= resultsExtension;
        })
<#= {
    builderExtensions = $".WithName(\"{<#= updateModel}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.Produces(StatusCodes.Status204NoContent)";
    }
        <#= :<#= builderExtensions;
}

        group.MapPost("/", (<#= modelName model) =>
        {
        <#= {
        if(!Model.UseTypedResults)
        {
            <#= ://return Results.Created($"/<#= pluralModel/{model.ID}", model);
        }
        else
        {
            <#= ://return TypedResults.Created($"/<#= pluralModel/{model.ID}", model);
        }
        }
        })
<#= {
    builderExtensions = $".WithName(\"{<#= createModel}\")";
    if(Model.OpenAPI)
    {
    builderExtensions+= $"\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
    builderExtensions += $"\n{builderExtensionSpaces}.Produces<{<#= modelName}>(StatusCodes.Status201Created)";
    }
        <#= :<#= builderExtensions;
}

        group.MapDelete("/{id}", (int id) =>
        {
<#= {
        if(!Model.UseTypedResults)
        {
            <#= ://return Results.Ok(new <#= modelName { ID = id });
        }
        else
        {
            <#= ://return TypedResults.Ok(new <#= modelName { ID = id });
        }
}
        })
<#= {
    builderExtensions = $".WithName(\"{<#= deleteModel}\")";
    if(Model.OpenAPI)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.WithOpenApi()";
    }
    if (!Model.UseTypedResults)
    {
        builderExtensions += $"\n{builderExtensionSpaces}.Produces<{<#= modelName}>(StatusCodes.Status200OK)";
    }
        <#= :<#= builderExtensions;  
    }
    }
}

<#
    StringBuilder mainEnvironment = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in Model.RequiredNamespaces)
    {
#>
using <#= ns #>;
<#
    }

    WriteLine("");

    GenerationEnvironment.Append(mainEnvironment);
#>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.VisualStudio.Web.CodeGenerators.Mvc.Templates.T4.DataContext
{
    using System.Collections.Generic;
    using System.Text;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class DataContextGenerator : DataContextGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {

    var usings = new List<string>
    {
        "Microsoft.AspNetCore.Mvc.RazorPages"
    };

    string baseClassName;
    if (string.Equals(DbContextTypeName, "DbContext", StringComparison.Ordinal))
    {
        baseClassName = "Microsoft.EntityFrameworkCore.DbContext";
    }
    else
    {
        baseClassName = "DbContext";
    }

            this.Write("namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextNamespace));
            this.Write("\r\n{>\r\n    public class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextTypeName));
            this.Write(" : ");
            this.Write(this.ToStringHelper.ToStringWithCulture(baseClassName));
            this.Write("\r\n    {\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextTypeName));
            this.Write(" (DbContextOptions<");
            this.Write(this.ToStringHelper.ToStringWithCulture(DbContextTypeName));
            this.Write("> options)\r\n            : base(options)\r\n        {\r\n        }\r\n\r\n        public D" +
                    "bSet<");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelTypeFullName));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelTypeName));
            this.Write(" { get; set; } = default!;\r\n    }\r\n}\r\n\r\n");

    StringBuilder mainEnvironment = GenerationEnvironment;
    GenerationEnvironment = new StringBuilder();

    foreach (var ns in usings)
    {

            this.Write("using ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ns));
            this.Write(";\r\n");

    }

    WriteLine("");

    GenerationEnvironment.Append(mainEnvironment);

            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }

private string _DbContextTypeNameField;

/// <summary>
/// Access the DbContextTypeName parameter of the template.
/// </summary>
private string DbContextTypeName
{
    get
    {
        return this._DbContextTypeNameField;
    }
}

private string _ModelTypeNameField;

/// <summary>
/// Access the ModelTypeName parameter of the template.
/// </summary>
private string ModelTypeName
{
    get
    {
        return this._ModelTypeNameField;
    }
}

private string _ModelTypeFullNameField;

/// <summary>
/// Access the ModelTypeFullName parameter of the template.
/// </summary>
private string ModelTypeFullName
{
    get
    {
        return this._ModelTypeFullNameField;
    }
}

private string _DbContextBaseClassField;

/// <summary>
/// Access the DbContextBaseClass parameter of the template.
/// </summary>
private string DbContextBaseClass
{
    get
    {
        return this._DbContextBaseClassField;
    }
}

private string _DbContextNamespaceField;

/// <summary>
/// Access the DbContextNamespace parameter of the template.
/// </summary>
private string DbContextNamespace
{
    get
    {
        return this._DbContextNamespaceField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool DbContextTypeNameValueAcquired = false;
if (this.Session.ContainsKey("DbContextTypeName"))
{
    this._DbContextTypeNameField = ((string)(this.Session["DbContextTypeName"]));
    DbContextTypeNameValueAcquired = true;
}
if ((DbContextTypeNameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "DbContextTypeName");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._DbContextTypeNameField = ((string)(tc.ConvertFrom(parameterValue)));
            DbContextTypeNameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'DbContextTypeName\' did not match the t" +
                    "ype of the data passed to the template.");
        }
    }
}
if ((DbContextTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DbContextTypeName");
    if ((data != null))
    {
        this._DbContextTypeNameField = ((string)(data));
    }
}
bool ModelTypeNameValueAcquired = false;
if (this.Session.ContainsKey("ModelTypeName"))
{
    this._ModelTypeNameField = ((string)(this.Session["ModelTypeName"]));
    ModelTypeNameValueAcquired = true;
}
if ((ModelTypeNameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "ModelTypeName");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._ModelTypeNameField = ((string)(tc.ConvertFrom(parameterValue)));
            ModelTypeNameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'ModelTypeName\' did not match the type " +
                    "of the data passed to the template.");
        }
    }
}
if ((ModelTypeNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModelTypeName");
    if ((data != null))
    {
        this._ModelTypeNameField = ((string)(data));
    }
}
bool ModelTypeFullNameValueAcquired = false;
if (this.Session.ContainsKey("ModelTypeFullName"))
{
    this._ModelTypeFullNameField = ((string)(this.Session["ModelTypeFullName"]));
    ModelTypeFullNameValueAcquired = true;
}
if ((ModelTypeFullNameValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "ModelTypeFullName");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._ModelTypeFullNameField = ((string)(tc.ConvertFrom(parameterValue)));
            ModelTypeFullNameValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'ModelTypeFullName\' did not match the t" +
                    "ype of the data passed to the template.");
        }
    }
}
if ((ModelTypeFullNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModelTypeFullName");
    if ((data != null))
    {
        this._ModelTypeFullNameField = ((string)(data));
    }
}
bool DbContextBaseClassValueAcquired = false;
if (this.Session.ContainsKey("DbContextBaseClass"))
{
    this._DbContextBaseClassField = ((string)(this.Session["DbContextBaseClass"]));
    DbContextBaseClassValueAcquired = true;
}
if ((DbContextBaseClassValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "DbContextBaseClass");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._DbContextBaseClassField = ((string)(tc.ConvertFrom(parameterValue)));
            DbContextBaseClassValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'DbContextBaseClass\' did not match the " +
                    "type of the data passed to the template.");
        }
    }
}
if ((DbContextBaseClassValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DbContextBaseClass");
    if ((data != null))
    {
        this._DbContextBaseClassField = ((string)(data));
    }
}
bool DbContextNamespaceValueAcquired = false;
if (this.Session.ContainsKey("DbContextNamespace"))
{
    this._DbContextNamespaceField = ((string)(this.Session["DbContextNamespace"]));
    DbContextNamespaceValueAcquired = true;
}
if ((DbContextNamespaceValueAcquired == false))
{
    string parameterValue = this.Host.ResolveParameterValue("Property", "PropertyDirectiveProcessor", "DbContextNamespace");
    if ((string.IsNullOrEmpty(parameterValue) == false))
    {
        global::System.ComponentModel.TypeConverter tc = global::System.ComponentModel.TypeDescriptor.GetConverter(typeof(string));
        if (((tc != null) 
                    && tc.CanConvertFrom(typeof(string))))
        {
            this._DbContextNamespaceField = ((string)(tc.ConvertFrom(parameterValue)));
            DbContextNamespaceValueAcquired = true;
        }
        else
        {
            this.Error("The type \'System.String\' of the parameter \'DbContextNamespace\' did not match the " +
                    "type of the data passed to the template.");
        }
    }
}
if ((DbContextNamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DbContextNamespace");
    if ((data != null))
    {
        this._DbContextNamespaceField = ((string)(data));
    }
}


    }
}


    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class DataContextGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
